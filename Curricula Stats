import requests
from datetime import datetime, timedelta
from typing import Dict, List
import logging
import time
from collections import defaultdict

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Airtable configuration (Replace with your actual values)
AIRTABLE_API_KEY = ""
AIRTABLE_BASE_ID = ""
AIRTABLE_TABLE_NAME = ""

# API Rate Limiting - Adjust as needed
REQUESTS_PER_MINUTE = 60  # Example: Limit to 60 requests per minute
SECONDS_PER_REQUEST = 60 / REQUESTS_PER_MINUTE

class CurriculaAPI:
    def __init__(self, client_id: str, client_secret: str):
        self.base_url = "https://mycurricula.com/api/v1"
        self.token = self._get_auth_token(client_id, client_secret)
        self.headers = {
            "Accept": "application/vnd.api+json",
            "Authorization": f"Bearer {self.token}"
        }

    def _get_auth_token(self, client_id: str, client_secret: str) -> str:
        auth_url = "https://mycurricula.com/oauth/token"
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/vnd.api+json"
        }
        data = {
            "scope": "account:read account:manage assignments:read assignments:manage assignments:learner-activity learners:read learners:manage phishing-campaigns:read phishing-campaigns:manage phishing-scenarios:read phishing-scenarios:manage users:read users:manage",
            "client_id": client_id,
            "client_secret": client_secret,
            "grant_type": "client_credentials"
        }

        try:
            response = requests.post(auth_url, headers=headers, data=data)
            response.raise_for_status()
            response_data = response.json()
            logger.info("Authentication successful")

            if "access_token" not in response_data:
                logger.error(f"Authentication response missing access_token: {response_data}")
                raise ValueError("Authentication response missing access_token")

            return response_data["access_token"]

        except requests.exceptions.RequestException as e:
            logger.error(f"Authentication failed: {str(e)}")
            logger.error(f"Response content: {response.text if 'response' in locals() else 'No response'}")
            raise

    def _make_request(self, method: str, endpoint: str, params: Dict = None) -> Dict:
        url = f"{self.base_url}{endpoint}"
        try:
            response = requests.request(method, url, headers=self.headers, params=params)
            response.raise_for_status()
            response_data = response.json()

            if "data" not in response_data:
                logger.error(f"Response missing 'data' key for {endpoint}: {response_data}")
                raise ValueError(f"API response missing 'data' key for {endpoint}")

            return response_data

        except requests.exceptions.RequestException as e:
            logger.error(f"API request failed for {endpoint}: {str(e)}")
            logger.error(f"Response content: {response.text if 'response' in locals() else 'No response'}")
            raise

    def get_accounts(self) -> List[Dict]:
        logger.info("Fetching accounts...")
        params = {
            "page[size]": 1000
        }
        response = self._make_request("GET", "/accounts", params=params)
        return response["data"]

    def get_phishing_campaigns(self, account_id: str) -> List[Dict]:
        logger.info(f"Fetching phishing campaigns for account {account_id}...")
        params = {
            "page[size]": 1000
        }
        response = self._make_request(
            "GET",
            f"/accounts/{account_id}/phishing-campaigns",
            params=params
        )
        return response["data"]

    def get_assignments(self, account_id: str) -> List[Dict]:
        logger.info(f"Fetching assignments for account {account_id}...")
        params = {
            "page[size]": 1000
        }
        response = self._make_request(
            "GET",
            f"/accounts/{account_id}/assignments",
            params=params
        )
        return response["data"]

    def get_learner_activity_for_assignment(self, assignment_id: str) -> List[Dict]:
        """Fetches all learner activity for a given assignment."""
        logger.info(f"Fetching learner activity for assignment {assignment_id}...")
        all_learner_activity = []
        page_number = 1
        while True:
            params = {
                "page[size]": 1000,  # Max allowed by the API
                "page[number]": page_number,
                "sort": "-progress"
            }
            response = self._make_request(
                "GET",
                f"/assignments/{assignment_id}/learner-activity",
                params=params
            )
            learner_activity_data = response.get("data", [])
            all_learner_activity.extend(learner_activity_data)

            # Check if there are more pages
            if page_number < response["meta"]["page"]["lastPage"]:
                page_number += 1
            else:
                break  # No more pages

        return all_learner_activity

def get_quarter_from_date(date_str: str) -> str:
    date = datetime.strptime(date_str.split('T')[0], '%Y-%m-%d')
    return f"{date.year}-Q{(date.month - 1) // 3 + 1}"

def is_within_previous_quarter(date_str: str, previous_quarter: Dict) -> bool:
    """
    Checks if the given date string falls within the previous quarter's date range.

    Args:
        date_str: The date string to check.
        previous_quarter: A dictionary containing 'start' and 'end' datetime objects for the previous quarter.

    Returns:
        True if the date is within the previous quarter, False otherwise.
    """
    date = datetime.strptime(date_str.split('T')[0], '%Y-%m-%d').date()
    start = previous_quarter['start'].date()
    end = previous_quarter['end'].date()
    return start <= date <= end

def get_previous_quarter() -> Dict:
    """
    Calculates the start and end dates of the previous quarter.

    Returns:
        A dictionary containing 'start', 'end', and 'label' of the previous quarter.
    """
    now = datetime.now()

    # Determine the previous quarter
    if 1 <= now.month <= 3:
        # Previous quarter is Q4 of the previous year
        start_date = datetime(now.year - 1, 10, 1)
        end_date = datetime(now.year - 1, 12, 31)
        quarter_label = f"{now.year - 1}-Q4"
    elif 4 <= now.month <= 6:
        # Previous quarter is Q1
        start_date = datetime(now.year, 1, 1)
        end_date = datetime(now.year, 3, 31)
        quarter_label = f"{now.year}-Q1"
    elif 7 <= now.month <= 9:
        # Previous quarter is Q2
        start_date = datetime(now.year, 4, 1)
        end_date = datetime(now.year, 6, 30)
        quarter_label = f"{now.year}-Q2"
    else:
        # Previous quarter is Q3
        start_date = datetime(now.year, 7, 1)
        end_date = datetime(now.year, 9, 30)
        quarter_label = f"{now.year}-Q3"

    return {
        'start': start_date,
        'end': end_date,
        'label': quarter_label
    }

def analyze_data(api: CurriculaAPI):
    results = defaultdict(lambda: defaultdict(lambda: {"report_rate": 0, "compromise_rate": 0, "training_completion_rate": 0, "report_count": 0, "compromise_count": 0, "training_count": 0, "total_learners": 0, "completed_learners": 0}))

    try:
        accounts = api.get_accounts()
        logger.info(f"Found {len(accounts)} accounts")

        previous_quarter = get_previous_quarter()
        previous_quarter_label = previous_quarter['label']

        for account in accounts:
            try:
                account_id = account["id"]
                account_name = account["attributes"]["name"]
                logger.info(f"Processing account: {account_name}")

                # Initialize the previous quarter for each account with default values
                results[account_name][previous_quarter_label] = {"report_rate": 0, "compromise_rate": 0, "training_completion_rate": 0, "report_count": 0, "compromise_count": 0, "training_count": 0, "total_learners": 0, "completed_learners": 0}

                # Get phishing campaigns
                campaigns = api.get_phishing_campaigns(account_id)
                # Filter completed campaigns from the previous quarter
                campaigns = [c for c in campaigns
                             if c["attributes"]["status"] == "completed"
                             and is_within_previous_quarter(c["attributes"]["createdAt"], previous_quarter)]
                logger.info(f"Found {len(campaigns)} relevant phishing campaigns for {account_name}")

                # Process phishing campaign data
                for campaign in campaigns:
                    quarter = get_quarter_from_date(campaign["attributes"]["createdAt"])
                    # Only process campaigns from the previous quarter
                    if quarter == previous_quarter_label:
                        stats = campaign["attributes"]["attemptStats"]
                        if stats["sent"] > 0:
                            results[account_name][quarter]["report_rate"] += (stats["reported"] / stats["sent"])
                            results[account_name][quarter]["compromise_rate"] += (stats["compromised"] / stats["sent"])
                            results[account_name][quarter]["report_count"] += 1
                            results[account_name][quarter]["compromise_count"] += 1

                # Get training assignments
                assignments = api.get_assignments(account_id)
                # Filter assignments from the previous quarter
                assignments = [a for a in assignments
                               if is_within_previous_quarter(a["attributes"]["createdAt"], previous_quarter)]
                logger.info(f"Found {len(assignments)} relevant assignments for {account_name}")

                # Process training data (calculate completion rate per quarter)
                for assignment in assignments:
                    quarter = get_quarter_from_date(assignment["attributes"]["createdAt"])
                    # Only process assignments from the previous quarter
                    if quarter == previous_quarter_label:
                        learner_activities = api.get_learner_activity_for_assignment(assignment["id"])

                        total_learners = len(learner_activities)
                        completed_learners = 0

                        for activity in learner_activities:
                            if activity["attributes"]["progress"] == 100:
                                completed_learners += 1

                        results[account_name][quarter]["total_learners"] += total_learners
                        results[account_name][quarter]["completed_learners"] += completed_learners
                        results[account_name][quarter]["training_count"] += 1

            except Exception as e:
                logger.error(f"Error processing account {account_name}: {str(e)}")
                continue

        # Calculate averages
        for account_name, quarters in results.items():
            for quarter, stats in quarters.items():
                if stats["report_count"] > 0:
                    stats["report_rate"] /= stats["report_count"]
                if stats["compromise_count"] > 0:
                    stats["compromise_rate"] /= stats["compromise_count"]
                if stats["training_count"] > 0:
                    stats["training_completion_rate"] = stats["completed_learners"] / stats["total_learners"] if stats["total_learners"] > 0 else 0

        return results

    except Exception as e:
        logger.error(f"Error in analyze_data: {str(e)}")
        raise

def get_last_day_of_quarter(quarter_label: str) -> str:
    """
    Get the last day of the quarter as a string in YYYY-MM-DD format.

    Args:
        quarter_label: The quarter label (e.g., "2023-Q3").

    Returns:
        The last day of the quarter in YYYY-MM-DD format.
    """
    year = int(quarter_label.split("-Q")[0])
    quarter = int(quarter_label.split("-Q")[1])

    if quarter == 1:
        last_day = datetime(year, 3, 31)
    elif quarter == 2:
        last_day = datetime(year, 6, 30)
    elif quarter == 3:
        last_day = datetime(year, 9, 30)
    else:  # quarter == 4
        last_day = datetime(year, 12, 31)

    return last_day.strftime("%Y-%m-%d")

def upload_to_airtable(results: Dict):
    """
    Upload curricula data to Airtable.

    Args:
        results: A dictionary containing the results from analyze_data.
    """
    airtable_url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }

    for account_name, quarters_data in results.items():
        for quarter_label, metrics in quarters_data.items():
            last_day_of_quarter = get_last_day_of_quarter(quarter_label)

            fields = {
                "Company Name": account_name,
                "Report Rate": metrics["report_rate"],
                "Phish Rate": metrics["compromise_rate"],
                "Completion Rate": metrics["training_completion_rate"],
                "Quarter": last_day_of_quarter
            }

            record_data = {"fields": fields}

            try:
                response = requests.post(airtable_url, headers=headers, json=record_data)
                response.raise_for_status()  # Raises an exception for bad status codes
                logging.info(f"Successfully uploaded data for {account_name}, {quarter_label} to Airtable")
                print(f"Successfully uploaded data for {account_name}, {quarter_label} to Airtable")

            except requests.exceptions.HTTPError as e:
                logging.error(f"HTTP error while uploading data for {account_name}, {quarter_label}: {e.response.status_code} - {e.response.text}")
                print(f"HTTP error while uploading data for {account_name}, {quarter_label}: {e.response.status_code} - {e.response.text}")

            except requests.exceptions.RequestException as e:
                logging.error(f"Failed to upload data to Airtable for {account_name}, {quarter_label}: {str(e)}")
                print(f"Failed to upload data to Airtable for {account_name}, {quarter_label}: {str(e)}")

            finally:
                time.sleep(SECONDS_PER_REQUEST)
                print(f"Waiting {SECONDS_PER_REQUEST} seconds due to rate limiting...")

def main():
    # Replace with actual credentials
    client_id = ""
    client_secret = ""

    try:
        logger.info("Initializing API client...")
        api = CurriculaAPI(client_id, client_secret)

        logger.info("Starting data analysis...")
        results = analyze_data(api)

        logger.info("Uploading results to Airtable...")
        upload_to_airtable(results)

        logger.info("Data successfully uploaded to Airtable!")

    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        raise

if __name__ == "__main__":
    main()
