import requests
import json
import sys
import time
from datetime import datetime, timedelta
import pytz
import logging

# Your Perch API credentials
CLIENT_ID = ""
CLIENT_SECRET = ""

# Airtable credentials - Replace with your actual values
AIRTABLE_API_KEY = ""
AIRTABLE_BASE_ID = ""
AIRTABLE_TABLE_NAME = ""

# Configure logging
logging.basicConfig(filename='perch_to_airtable.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Airtable API rate limit (requests per second)
AIRTABLE_RATE_LIMIT = 5
# Calculate the delay between requests (in seconds)
REQUEST_DELAY = 1 / AIRTABLE_RATE_LIMIT

def get_auth_token():
    """
    Authenticate with Perch API and get access token
    """
    auth_url = "https://access.perchsecurity.com/oauth/token"
    headers = {"Content-Type": "application/json"}
    payload = {
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "audience": "https://api.perchsecurity.com",
        "grant_type": "client_credentials"
    }

    try:
        response = requests.post(auth_url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()["access_token"]
    except requests.exceptions.RequestException as e:
        logging.error(f"Authentication failed: {str(e)}")
        sys.exit(1)

def get_companies(token):
    """
    Retrieve all companies from Perch API
    """
    companies_url = "http://api.perchsecurity.com/company/names"
    headers = {"Authorization": f"Bearer {token}"}

    try:
        response = requests.get(companies_url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to retrieve companies: {str(e)}")
        sys.exit(1)

def get_alerts(token, team_id, start_date, end_date, page=1):
    """
    Retrieve alerts for a specific team and date range
    """
    url = "http://api.perchsecurity.com/v1/alerts"
    headers = {"Authorization": f"Bearer {token}"}
    params = {
        'team_id': team_id,
        'created_at__gte': start_date.isoformat(),
        'created_at__lte': end_date.isoformat(),
        'page_size': 1000,
        'page': page
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to retrieve alerts: {str(e)}")
        return None

def get_escalations(token, team_id, start_date, end_date, page=1):
    """
    Retrieve escalations for a specific team and date range
    """
    url = "http://api.perchsecurity.com/v1/escalations"
    headers = {"Authorization": f"Bearer {token}"}
    params = {
        'team_id': team_id,
        'created_at__gte': start_date.isoformat(),
        'created_at__lte': end_date.isoformat(),
        'page_size': 1000,
        'page_number': page
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to retrieve escalations: {str(e)}")
        return None

def get_metrics_for_period(token, team_id, start_date, end_date):
    """
    Get total alerts and escalations for a specific period
    """
    metrics = {'alerts': 0, 'escalations': 0}

    # Get alerts
    page = 1
    page_size = 1000  # Default page size for alerts (since it's also 1000)
    while True:
        try:
            alerts_data = get_alerts(token, team_id, start_date, end_date, page)
        except requests.exceptions.RequestException as e:
            logging.error(f"Error fetching alerts: {e}")
            print(f"Error fetching alerts: {e}")
            break  # Consider more specific error handling if needed

        if not alerts_data or not alerts_data.get('results'):
            break

        metrics['alerts'] += len(alerts_data['results'])

        # Use page_size from the response to accurately track fetched records
        page_size = alerts_data.get('page_size', page_size)

        if (page - 1) * page_size + len(alerts_data['results']) >= alerts_data.get('total_count', float('inf')):
            break
        page += 1

    # Get escalations
    page = 1
    page_size = 1000  # Default page size for escalations
    while True:
        try:
            escalations_data = get_escalations(token, team_id, start_date, end_date, page)
        except requests.exceptions.RequestException as e:
            logging.error(f"Error fetching escalations: {e}")
            print(f"Error fetching escalations: {e}")
            break  # Consider more specific error handling if needed

        if not escalations_data or not escalations_data.get('results'):
            break

        metrics['escalations'] += len(escalations_data['results'])

        # Use page_size from the response to accurately track fetched records
        page_size = escalations_data.get('page_size', page_size)

        if (page - 1) * page_size + len(escalations_data['results']) >= escalations_data.get('total_count', float('inf')):
            break
        page += 1

    return metrics

def get_previous_quarter_date_range(current_date: datetime):
    """
    Calculates the start and end dates of the previous quarter.

    Args:
        current_date: The current date.

    Returns:
        A tuple containing the start and end dates of the previous quarter.
    """
    if 1 <= current_date.month <= 3:
        # Current quarter is Q1, so previous quarter is Q4 of previous year
        start_date = datetime(current_date.year - 1, 10, 1, tzinfo=pytz.UTC)
        end_date = datetime(current_date.year - 1, 12, 31, tzinfo=pytz.UTC)
    elif 4 <= current_date.month <= 6:
        # Current quarter is Q2
        start_date = datetime(current_date.year, 1, 1, tzinfo=pytz.UTC)
        end_date = datetime(current_date.year, 3, 31, tzinfo=pytz.UTC)
    elif 7 <= current_date.month <= 9:
        # Current quarter is Q3
        start_date = datetime(current_date.year, 4, 1, tzinfo=pytz.UTC)
        end_date = datetime(current_date.year, 6, 30, tzinfo=pytz.UTC)
    else:
        # Current quarter is Q4
        start_date = datetime(current_date.year, 7, 1, tzinfo=pytz.UTC)
        end_date = datetime(current_date.year, 9, 30, tzinfo=pytz.UTC)

    return start_date, end_date

def get_quarter_label(start_date):
    """
    Generates a quarter label in the format "YYYY-QX" for a given start date.

    Args:
        start_date: The start date of the quarter.

    Returns:
        A string representing the quarter label (e.g., "2023-Q4").
    """
    year = start_date.year
    quarter = (start_date.month - 1) // 3 + 1
    return f"{year}-Q{quarter}"

def get_last_day_of_quarter(year, quarter):
    """
    Get the last day of a quarter as a string in 'YYYY-MM-DD' format.

    Args:
        year: The year.
        quarter: The quarter (1, 2, 3, or 4).

    Returns:
        A string representing the last day of the quarter.
    """
    if quarter == 1:
        return f"{year}-03-31"
    elif quarter == 2:
        return f"{year}-06-30"
    elif quarter == 3:
        return f"{year}-09-30"
    else:  # quarter == 4
        return f"{year}-12-31"

def export_to_airtable(companies, metrics_by_quarter, quarter_label, last_day_of_quarter):
    """
    Export companies data with quarterly metrics to Airtable, creating
    one record per company per quarter for alerts and another for escalations.
    Includes rate limiting and enhanced error handling.
    """
    airtable_url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }

    for company in companies:
        quarter_metrics = metrics_by_quarter.get(str(company['id']), {}).get(quarter_label, {'escalations': 0, 'alerts': 0})

        # Prepare Airtable record data for Alerts
        fields_alerts = {
            "Company Name": company['name'],
            "Count": quarter_metrics['alerts'],
            "Status": "Alerts",
            "Quarter": last_day_of_quarter  # Use the last day of the quarter
        }

        # Prepare Airtable record data for Escalations
        fields_escalations = {
            "Company Name": company['name'],
            "Count": quarter_metrics['escalations'],
            "Status": "Escalations",
            "Quarter": last_day_of_quarter
        }

        record_data_alerts = {"fields": fields_alerts}
        record_data_escalations = {"fields": fields_escalations}

        try:
            # Upload the Alerts record
            response = requests.post(airtable_url, headers=headers, json=record_data_alerts)
            response.raise_for_status()
            logging.info(f"Successfully added Alerts data for {company['name']}, {quarter_label} to Airtable")
            print(f"Successfully added Alerts data for {company['name']}, {quarter_label} to Airtable")

        except requests.exceptions.HTTPError as e:
            logging.error(f"HTTP error while adding Alerts data for {company['name']}, {quarter_label}: {e.response.status_code} - {e.response.text}")
            print(f"HTTP error while adding Alerts data for {company['name']}, {quarter_label}: {e.response.status_code} - {e.response.text}")
            # Implement retry logic or other error handling here if needed

        except requests.exceptions.RequestException as e:
            logging.error(f"Failed to add Alerts data to Airtable for {company['name']}, {quarter_label}: {str(e)}")
            print(f"Failed to add Alerts data to Airtable for {company['name']}, {quarter_label}: {str(e)}")
            # Handle other request exceptions (e.g., connection errors)

        finally:
            # Wait for the calculated delay to respect rate limits
            time.sleep(REQUEST_DELAY)
            print(f"Waiting {REQUEST_DELAY} seconds due to rate limiting...")

        try:
            # Upload the Escalations record
            response = requests.post(airtable_url, headers=headers, json=record_data_escalations)
            response.raise_for_status()
            logging.info(f"Successfully added Escalations data for {company['name']}, {quarter_label} to Airtable")
            print(f"Successfully added Escalations data for {company['name']}, {quarter_label} to Airtable")

        except requests.exceptions.HTTPError as e:
            logging.error(f"HTTP error while adding Escalations data for {company['name']}, {quarter_label}: {e.response.status_code} - {e.response.text}")
            print(f"HTTP error while adding Escalations data for {company['name']}, {quarter_label}: {e.response.status_code} - {e.response.text}")
            # Implement retry logic or other error handling here if needed

        except requests.exceptions.RequestException as e:
            logging.error(f"Failed to add Escalations data to Airtable for {company['name']}, {quarter_label}: {str(e)}")
            print(f"Failed to add Escalations data to Airtable for {company['name']}, {quarter_label}: {str(e)}")
            # Handle other request exceptions (e.g., connection errors)

        finally:
            # Wait for the calculated delay to respect rate limits
            time.sleep(REQUEST_DELAY)
            print(f"Waiting {REQUEST_DELAY} seconds due to rate limiting...")

def main():
    # Get authentication token
    logging.info("Authenticating with Perch API...")
    print("Authenticating with Perch API...")
    token = get_auth_token()

    # Get all companies
    logging.info("Retrieving companies...")
    print("Retrieving companies...")
    companies = get_companies(token)

    # Get the previous quarter's dates
    current_date = datetime.now(pytz.UTC)
    start_date, end_date = get_previous_quarter_date_range(current_date)
    quarter_label = get_quarter_label(start_date)
    last_day_of_quarter = get_last_day_of_quarter(start_date.year, (start_date.month - 1) // 3 + 1)

    # Initialize metrics storage
    metrics_by_quarter = {}

    # Get metrics for each company for the previous quarter
    total_companies = len(companies)
    for i, company in enumerate(companies, 1):
        logging.info(f"Retrieving metrics for company {i}/{total_companies}: {company['name']}")
        print(f"Retrieving metrics for company {i}/{total_companies}: {company['name']}")
        company_metrics = {}

        metrics = get_metrics_for_period(
            token,
            company['id'],
            start_date,  # Use start_date from get_previous_quarter_date_range
            end_date  # Use end_date from get_previous_quarter_date_range
        )

        company_metrics[quarter_label] = metrics
        metrics_by_quarter[str(company['id'])] = company_metrics

    # Export to Airtable
    logging.info("Exporting data to Airtable...")
    print("Exporting data to Airtable...")
    export_to_airtable(companies, metrics_by_quarter, quarter_label, last_day_of_quarter)

if __name__ == "__main__":
    main()
